class Solution {

    int count = 0;
    public int reversePairs(int[] arr) {
        
        Ms(arr,0,arr.length-1);
        return count;
    }
    public  void Ms(int[] arr, int i, int j) {
        if (i < j) {
            int mid = i + (j - i) / 2;

            Ms(arr, i, mid);
            Ms(arr, mid + 1, j);
            count+=MergeSort_(arr, i, mid, j);
        }
    }

    public static int MergeSort_(int[] arr, int low, int mid, int high) {

        //[low....mid]
        //[mid+1....high]


        

        int left = low; // starting index of left half of arr
        int right = mid + 1; // starting index of right half of arr

        int[] temp = new int[high-low+1];
        int k = 0,ans = 0,c = 0;

        

        for(int l = low, r = mid+1; l<=mid;)
        {
            if(r > high || ((long)arr[l] <= (long)arr[r]*2))//r  > high travesed all elemnets of other element index or found element less than right array
            {
                l++;//increment
                ans+=c;//add counted pairs to ans
            }
            else//found a pair
            {
                r++;
                c++;

            }
        }
        while (left <= mid && right <= high) {

            if (arr[left] <= arr[right]) {
                temp[k++] = arr[left++];
            } else {
                if(arr[left] > 2 * arr[right])c++;
                temp[k++] = arr[right++];
            }
        }
        // if elements on the left half are still left //
        while (left <= mid) {
            temp[k++] = arr[left++];
        }
        // if elements on the right half are still left //
        while (right <= high) {
            temp[k++] = arr[right++];
        }

        // transfering all elements from temporary to arr //
        for (int i = low; i <= high; i++) {
            arr[i] = temp[i - low];
        }
        
        return ans;
    }
    
}
